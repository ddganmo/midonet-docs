#cloud-config

---
write-files:
  - path: /etc/conf.d/k8s-controller-defaults
    #Default configuration parameters
    permissions: '0644'
    content: |
        OS_USERNAME=neutron
        OS_PASSWORD=neutron
        OS_TENANT_NAME=service
  - path: /etc/conf.d/kubectl
    # Configuration for users of kubectl so that it points to the Kubernetes
    # API server that is served by this instance.
    permissions: '0644'
    content: |
      apiVersion: v1
      clusters:
      - cluster:
          server: http://${LOCAL_IP}:8080
        name: default-cluster
      contexts:
      - context:
          cluster: default-cluster
          user: default-admin
        name: default-system
      current-context: default-system
      kind: Config
      preferences: {}
      users: []
  - path: /opt/bin/prepare-config
    #prepares the node after first boot
    permissions: '0755'
    content: |
      #!/bin/bash

      #merge default config and (optional) provided pararmeters
      CFG_FILE="k8s-controller"
      touch -a /etc/conf.d/$CFG_FILE
      cp /etc/conf.d/$CFG_FILE /tmp/$CFG_FILE
      awk -F '=' '!a[$1]++' /tmp/$CFG_FILE /etc/conf.d/"$CFG_FILE"-defaults > /etc/conf.d/$CFG_FILE
      #allow sourcing of file
      chmod +x /etc/conf.d/$CFG_FILE
  - path: /opt/bin/wupiao
    # Small bash utility that allows us to wait for an HTTP service to be
    # responsive before resuming operations.
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && \
        until curl -o /dev/null -sIf http://${1}; do \
          sleep 1 && echo .;
        done;
      exit $?
  - path: /opt/bin/kubectl
    # Wrapper around Kubernetes' kubectl command line tool. It will download
    # the tool and set the right configuration for the caller to target the
    # Kubernetes API server that is served by this instance.
    permissions: '0755'
    content: |
      #!/bin/bash


      if [[ ! -f /opt/bin/_kubectl ]]; then
          curl http://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/linux/amd64/kubectl 2> /dev/null > /tmp/_kubectl
          chmod +x /tmp/_kubectl
          sudo mv /tmp/_kubectl /opt/bin/_kubectl
      fi

      #sets the kubectl configuration from the template and the configuration
      if [[ ! -f ${HOME}/.kube/config ]]; then
          mkdir -p "${HOME}/.kube"
          #setup the environment (sourcing the file doesn't work!)
          export $(cat /etc/conf.d/k8s-controller)
          envsubst  < /etc/conf.d/kubectl > "${HOME}/.kube/config"
      fi
      /opt/bin/_kubectl $@
  - path: /opt/bin/midonet-cli
    permissions: '0755'
    content: |
      #!/bin/sh
      #
      # Adapter for using midonet-cli from midonet/utils

      docker run --rm \
        -e CLUSTER_URL="http://${OST_CONTROLLER}:8181/midonet-api" \
        -e PASSWORD=pass \
        midonet/utils cli "$@"
coreos:
  fleet:
    metadata: "role=master"  # In case the user wants to fleet schedule things
  units:
    - name: prepare-config.service
      command: start
      content: |
        [Unit]
        Description=Node preparation

        [Service]
        Type=oneshot
        ExecStart=/opt/bin/prepare-config
    - name: etcd3.service
      # Sets up an Etcd 3 cluster composed of k8s-controller
      # If you want to setup a HA cluster, use DNS or token discovery, refer to:
      # https://coreos.com/etcd/docs/latest/clustering.html
      command: start
      content: |
        [Unit]
        Description=Etcd3
        Documentation=https://github.com/coreos/etcd
        Requires=docker.service prepare-config.service
        After=docker.service prepare-config.service

        [Service]
        EnvironmentFile=/etc/conf.d/k8s-controller
        ExecStartPre=-/usr/bin/docker kill %n
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStartPre=/usr/bin/docker pull quay.io/coreos/etcd:v3.0.1
        ExecStart=/usr/bin/docker run --name %n \
          --net host \
          --volume=/var/etcd:/var/etcd \
          quay.io/coreos/etcd:v3.0.1 \
          /usr/local/bin/etcd \
            --name k8s-controller \
            --data-dir /var/etcd/data \
            --initial-advertise-peer-urls http://${LOCAL_IP}:2380 \
            --listen-peer-urls http://0.0.0.0:2380 \
            --listen-client-urls http://0.0.0.0:2379 \
            --advertise-client-urls http://${LOCAL_IP}:2379 \
            --initial-cluster-token etcd-cluster-1 \
            --initial-cluster k8s-controller=http://${LOCAL_IP}:2380 \
            --initial-cluster-state new
        ExecStop=/usr/bin/docker kill %n
        ExecStopPost=/usr/bin/docker rm -f %n
        Restart=always
        RestartSec=10
    - name: docker.service
      command: start
    - name: kubernetes-setup-files.service
      command: start
      content: |
        [Unit]
        Description=Hyperkube Kubernetes facility that sets up the base \
           configuration needed by the Kubernetes API Server and the \
           Kubernetes Controller Manager
        Documentation=https://github.com/kubernetes/kubernetes
        Requires=docker.service prepare-config.service
        After=docker.service prepare-config.service

        [Service]
        EnvironmentFile=/etc/conf.d/k8s-controller
        ExecStartPre=-/usr/bin/docker kill %n
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStartPre=/usr/bin/docker pull gcr.io/google_containers/hyperkube-amd64:v1.3.0
        ExecStart=/usr/bin/docker run --name %n --net=host \
          --volume=/data:/data \
          gcr.io/google_containers/hyperkube-amd64:v1.3.0 \
            /setup-files.sh \
            IP:${LOCAL_IP},DNS:kubernetes,DNS:kubernetes.default,DNS:kubernetes.default.svc,DNS:kubernetes.default.svc.cluster.local
        ExecStop=/usr/bin/docker kill %n
        ExecStopPost=/usr/bin/docker rm -f %n
    - name: kube-apiserver.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/kubernetes/kubernetes
        Requires=etcd3.service kubernetes-setup-files.service docker.service
        After=prepare-config.service etcd3.service kubernetes-setup-files.service docker.service

        [Service]
        EnvironmentFile=/etc/conf.d/k8s-controller
        ExecStartPre=/opt/bin/wupiao ${LOCAL_IP}:2379/v2/machines
        ExecStartPre=-/usr/bin/docker kill %n
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStartPre=/usr/bin/docker pull gcr.io/google_containers/hyperkube-amd64:v1.3.0
        ExecStart=/usr/bin/docker run --name %n --net=host \
          --volume=/data:/srv/kubernetes \
          gcr.io/google_containers/hyperkube-amd64:v1.3.0 \
          /hyperkube apiserver \
            --service-cluster-ip-range=10.0.0.1/24 \
            --insecure-bind-address=0.0.0.0 \
            --insecure-port=8080 \
            --etcd-servers=http://${LOCAL_IP}:2379 \
            --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota \
            --client-ca-file=/srv/kubernetes/ca.crt \
            --basic-auth-file=/srv/kubernetes/basic_auth.csv \
            --min-request-timeout=300 \
            --tls-cert-file=/srv/kubernetes/server.cert \
            --tls-private-key-file=/srv/kubernetes/server.key \
            --token-auth-file=/srv/kubernetes/known_tokens.csv \
            --allow-privileged=true \
            --v=2 \
            --logtostderr=true
        ExecStop=/usr/bin/docker kill %n
        ExecStopPost=/usr/bin/docker rm -f %n
        Restart=always
        RestartSec=10
    - name: kube-controller-manager.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/kubernetes/kubernetes
        Requires=kube-apiserver.service docker.service
        After=prepare-config.service kube-apiserver.service docker.service

        [Service]
        EnvironmentFile=/etc/conf.d/k8s-controller
        ExecStartPre=/opt/bin/wupiao ${LOCAL_IP}:8080`
        ExecStartPre=-/usr/bin/docker kill %n
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStartPre=/usr/bin/docker pull gcr.io/google_containers/hyperkube-amd64:v1.3.0
        ExecStart=/usr/bin/docker run --name %n --net=host \
          --volume=/data:/srv/kubernetes \
          gcr.io/google_containers/hyperkube-amd64:v1.3.0 \
          /hyperkube controller-manager \
            --master=${LOCAL_IP}:8080 \
            --service-account-private-key-file=/srv/kubernetes/server.key \
            --root-ca-file=/srv/kubernetes/ca.crt \
            --min-resync-period=3m \
            --v=2 \
            --logtostderr=true
        ExecStop=/usr/bin/docker kill %n
        ExecStopPost=/usr/bin/docker rm -f %n
        Restart=always
        RestartSec=10
    - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/kubernetes/kubernetes
        Requires=kube-apiserver.service docker.service
        After=prepare-config.service kube-apiserver.service docker.service

        [Service]
        EnvironmentFile=/etc/conf.d/k8s-controller
        ExecStartPre=/opt/bin/wupiao ${LOCAL_IP}:8080`
        ExecStartPre=-/usr/bin/docker kill %n
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStartPre=/usr/bin/docker pull gcr.io/google_containers/hyperkube-amd64:v1.3.0
        ExecStart=/usr/bin/docker run --name %n --net=host \
          gcr.io/google_containers/hyperkube-amd64:v1.3.0 \
          /hyperkube scheduler \
            --master=${LOCAL_IP}:8080 \
            --v=2 \
            --logtostderr=true
        ExecStop=/usr/bin/docker kill %n
        ExecStopPost=/usr/bin/docker rm -f %n
        Restart=always
        RestartSec=10
    - name: kuryr-watcher.service
      command: start
      content: |
        [Unit]
        Description=Kuryr Kubernetes API watcher and translator of events to \
          Neutron entities.
        Documentation=https://github.com/midonet/kuryr/tree/k8s
        Requires=kube-apiserver.service docker.service
        After=prepare-config.service kube-apiserver.service docker.service

        [Service]
        EnvironmentFile=/etc/conf.d/k8s-controller
        ExecStartPre=/opt/bin/wupiao ${LOCAL_IP}:8080
        ExecStartPre=-/usr/bin/docker kill %n
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStart=/usr/bin/docker run --name %n \
          -e SERVICE_CLUSTER_IP_RANGE=10.0.0.0/24 \
          -e SERVICE_USER=${OS_USERNAME} \
          -e SERVICE_TENANT_NAME=${OS_TENANT_NAME} \
          -e SERVICE_PASSWORD=${OS_PASSWORD} \
          -e IDENTITY_URL=http://${OST_CONTROLLER}:35357/v2.0 \
          -e OS_URL=http://${OST_CONTROLLER}:9696 \
          -e K8S_API=http://${LOCAL_IP}:8080 \
          -v /var/log/kuryr:/var/log/kuryr \
          midonet/raven:0.5.2
        ExecStop=/usr/bin/docker kill %n
        ExecStopPost=/usr/bin/docker rm -f %n
        Restart=always
        RestartSec=3
